{"version":3,"sources":["utils/pokemon.js","components/Card/Card.js","components/Navbar/Navbar.js","App.js","index.js"],"names":["getAllPokemon","url","Promise","resolve","reject","fetch","then","res","json","data","catch","error","Card","_ref","pokemon","pokemonName","setPokemonName","useState","pokemonTypeURLs","setPokemonTypeURLs","pokemonType","setPokemonType","pokemonNameDetail","species","useEffect","async","response","jaName","names","find","name","language","loadPokemonName","resPokemonTypes","types","map","v","type","length","joinedTypes","all","join","loadPokemonType","React","createElement","className","src","sprites","front_default","alt","weight","height","abilities","ability","Navbar","App","loading","setLoading","pokemonData","setPokemonData","nextURL","setNextURL","prevURL","setPrevURL","loadPokemon","results","next","previous","fetchPokemonData","_pokemonData","console","log","Fragment","i","key","onClick","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ffce5bb4.chunk.js","sourcesContent":["// 全てのポケモンを取得する関数\nexport const getAllPokemon = (url) => {\n\t// Promiseオブジェクトを返す\n\t//Promiseオブジェクトは、非同期処理の結果を表すオブジェクト。\n\t//Promiseは、将来完了する可能性のある処理を表現し、その結果の値や失敗の理由を処理するためのメソッドを提供。\n    return new Promise((resolve, reject) => {\n        // fetch APIを使用してデータを取得\n        fetch(url)\n        .then((res) => \n            // レスポンスをJSON形式に変換\n            res.json()\n        )\n        .then((data) => \n            // 変換されたデータを解決\n            resolve(data)\n        )\n        .catch((error) => \n            // エラーが発生した場合は拒否\n            reject(error)\n        );\n    });\n};\n\n// 特定のポケモンを取得する関数\nexport const getPokemon = (url) => {\n    return new Promise((resolve, reject) => {\n        // fetch APIを使用してデータを取得\n        fetch(url)\n        .then((res) => \n            // レスポンスをJSON形式に変換\n            res.json()\n        )\n        .then((data) => {\n            // 変換されたデータを解決\n\t\t\t// console.log(data);\n            resolve(data);\n        })\n        .catch((error) => \n            // エラーが発生した場合は拒否\n            reject(error)\n        );\n    });\n};\n","import React, { useState, useEffect } from 'react';\r\nimport './Card.css';\r\n\r\nexport const Card = ({ pokemon }) => {\r\n    // ポケモンの名前を管理するステート\r\n    const [pokemonName, setPokemonName] = useState([]);\r\n\r\n    // ポケモンのタイプURLを管理するステート\r\n    const [pokemonTypeURLs, setPokemonTypeURLs] = useState([]);\r\n\r\n    // ポケモンのタイプを管理するステート\r\n    const [pokemonType, setPokemonType] = useState([]);\r\n\r\n    // ポケモンの名前の詳細URLを取得\r\n    let pokemonNameDetail = pokemon.species.url;\r\n    // console.log(pokemonNameDetail);\r\n\r\n    // ポケモンの名前を取得する関数\r\n    const loadPokemonName = async (data) => {\r\n        let response = await fetch(data);\r\n        let result = await response.json();\r\n        // 日本語の名前を取得\r\n        let jaName = result.names.find(name => name.language.name === \"ja\").name;\r\n        // console.log(jaName);\r\n        // ステートに日本語の名前をセット\r\n        setPokemonName(jaName);\r\n    };\r\n\r\n    // ポケモンのタイプを取得する関数\r\n    const loadPokemonType = async (data) => {\r\n        let _pokemonType = await Promise.all(\r\n            data.map(async (url) => {\r\n                let response = await fetch(url);\r\n                let result = await response.json();\r\n                let jaName = result.names.find(name => name.language.name === \"ja\").name;\r\n                return jaName;\r\n            })\r\n        );\r\n        // console.log(_pokemonType);\r\n        let joinedTypes = _pokemonType.join(\" / \");\r\n        setPokemonType(joinedTypes);\r\n    };\r\n\r\n    // コンポーネントがマウントされたときに実行される\r\n    useEffect(() => {\r\n        // ポケモンの名前を取得\r\n        loadPokemonName(pokemonNameDetail);\r\n\r\n        // ポケモンのタイプURLを指定\r\n        let resPokemonTypes = pokemon.types.map((v) => v.type.url);\r\n        setPokemonTypeURLs(resPokemonTypes);\r\n    }, [pokemonNameDetail, pokemon.types]);\r\n\r\n    // ポケモンのタイプURLが変更されたときに実行される\r\n    useEffect(() => {\r\n        if (pokemonTypeURLs.length > 0) {\r\n            loadPokemonType(pokemonTypeURLs);\r\n        }\r\n    }, [pokemonTypeURLs]);\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"cardImg\">\r\n                {/* ポケモンの画像を表示 */}\r\n                <img src={pokemon.sprites.front_default} alt=\"\"></img>\r\n            </div>\r\n            <h3 className=\"cardName\">{pokemonName}</h3>\r\n            <div className=\"cardTypes\">\r\n                <div>タイプ</div>\r\n                {/* ポケモンのタイプを表示 */}\r\n                {pokemonType}\r\n            </div>\r\n            <div className=\"cardInfo\">\r\n                <div className=\"cardData\">\r\n                    <p className=\"title\">重さ: {pokemon.weight}</p>\r\n                </div>\r\n                <div className=\"cardData\">\r\n                    <p className=\"title\">高さ: {pokemon.height}</p>\r\n                </div>\r\n                <div className=\"cardData\">\r\n                    <p className=\"title\">アビリティ: {pokemon.abilities[0].ability.name}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react'\nimport './Navbar.css';\nconst Navbar = () => {\n  return (\n\t<nav>ポケモン図鑑</nav>\n  )\n}\n\nexport default Navbar;","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { getAllPokemon, getPokemon } from \"./utils/pokemon.js\";\nimport Card from './components/Card/Card.js';\nimport Navbar from './components/Navbar/Navbar.js';\n\nfunction App() {\n  // エンドポイントのURL\n  const initialURL = \"https://pokeapi.co/api/v2/pokemon/\";\n  // ローディング状態を管理するステート\n  const [loading, setLoading] = useState(true);\n  // ポケモンデータを管理するステート\n  const [pokemonData, setPokemonData] = useState([]);\n  // 次のページのURLを管理するステート\n  const [nextURL, setNextURL] = useState(\"\");\n  // 前のページのURLを管理するステート\n  const [prevURL, setPrevURL] = useState(\"\");\n\n\n  // コンポーネントがマウントされたときに実行される\n  useEffect(() => {\n    const fetchPokemonData = async() => {\n      // 全てのポケモンデータを取得\n      let res = await getAllPokemon(initialURL);\n      // 各ポケモンの詳細なデータを取得\n      loadPokemon(res.results);\n\t//   console.log(res.next);\n\t  setNextURL(res.next);\n      // ローディング状態を解除\n\t  setPrevURL(res.previous); //null\n      setLoading(false);\n    };\n    fetchPokemonData();\n  }, []);\n\n  // 各ポケモンの詳細なデータを取得する関数\n  const loadPokemon = async (data) => {\n    // 各ポケモンの詳細データを非同期で取得し、_pokemonDataに格納\n    let _pokemonData = await Promise.all(\n      data.map((pokemon) => {\n        // 各ポケモンの詳細データを取得\n\t\t// console.log(pokemon);\n        let pokemonRecord = getPokemon(pokemon.url);\n        return pokemonRecord;\n      })\n    );\n    // 取得したポケモンデータをステートにセット\n    setPokemonData(_pokemonData);\n  };\n\n  // デバッグ用にポケモンデータをコンソールに出力\n  console.log(pokemonData);\n\n\tconst handleNextPage = async() =>{\n\t\tsetLoading(true);\n\t\tlet data = await getAllPokemon(nextURL);\n\t\t// console.log(data);\n\t\tawait loadPokemon(data.results);\n\t\tsetNextURL(data.next);\n\t\tsetPrevURL(data.previous);\n\t\tsetLoading(false);\n\t};\n\tconst handlePrevPage = async() => {\n\t\tif(!prevURL) return;\n\n\t\tsetLoading(true);\n\t\tlet data = await getAllPokemon(prevURL);\n\t\tawait loadPokemon(data.results);\n\t\tsetNextURL(data.next);\n\t\tsetPrevURL(data.previous);\n\t\tsetLoading(false);\n\t};\n\n  return (\n\t<>\n    <div className=\"App\">\n      {/* ローディング中かどうかで表示を切り替える */}\n      {loading ? (\n        <h1>ロード中・・・</h1>\n      ) : (\n        <>\n\t\t<Navbar />\n          {/* <h1>ポケモンデータを取得しました</h1> */}\n          <div className='pokemonCardContainer'>\n            {/* 取得したポケモンデータをカードコンポーネントとして表示(0から19個までのデータを繰り返す。) */}\n            {pokemonData.map((pokemon, i) => {\n              return <Card key={i} pokemon={pokemon} />;\n            })}\n          </div>\n\t\t  <div className=\"btn\">\n\t\t\t <button onClick={handlePrevPage}>前へ</button>\n\t\t\t <button onClick={handleNextPage}>次へ</button>\n\t\t  </div>\n        </>\n      )}\n    </div>\n\t  </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n"],"sourceRoot":""}